generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  password      String
  address       String?
  phoneNumber   String?
  verified      Boolean @default(false)
  adminProfile  Admin?
  buyerProfile  Buyer?
  sellerProfile Seller?
  tokens        Token[]
  deleted       Boolean @default(false)
  banned        Boolean @default(false)
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  expiresAt DateTime
  data      String?  @db.VarChar(1028)
}

model Token {
  id        String     @id @default(uuid())
  userId    String
  valid     Boolean    @default(true)
  createdAt DateTime   @default(now())
  type      Token_type
  user      User       @relation(fields: [userId], references: [id])

  @@index([userId], map: "Token_userId_fkey")
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Seller {
  id               String    @id @default(uuid())
  userId           String    @unique
  approved         Boolean   @default(false)
  approvalDocument String?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products         Product[]
}

model Buyer {
  id     String   @id @default(uuid())
  userId String   @unique
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Orders[]
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String
  price       Int
  sellerId    String
  categoryId  String
  category    ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  seller      Seller          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orders      Orders[]
  images      ProductImage[]
  removed     Boolean         @default(false)

  @@index([categoryId, name])
  @@index([sellerId], map: "Product_sellerId_fkey")
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  path      String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "ProductImage_productId_fkey")
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Orders {
  id        String   @id @default(uuid())
  buyerId   String
  productId String
  quantity  Int      @default(1)
  status    Boolean  @default(false)
  time      DateTime @default(now())
  buyer     Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([buyerId], map: "Orders_buyerId_fkey")
  @@index([productId], map: "Orders_productId_fkey")
}

model Event {
  id   String   @id @default(uuid())
  time DateTime @default(now())
  type String
}

enum Token_type {
  EMAIL_VERIFICATION
  FORGOT_PASSWORD
  DELETE_ACCOUNT
}
