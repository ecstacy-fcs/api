// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  password    String
  address     String?
  phoneNumber String?

  verified Boolean    @default(false)
  tokens   Token[]

  adminId      String?
  adminProfile Admin?

  sellerId      String?
  sellerProfile Seller?

  buyerProfile Buyer?
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Token {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  valid     Boolean   @default(true)
  createdAt DateTime  @default(now())
  type      TokenType
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Seller {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique
  products         Product[]
  approved         Boolean   @default(false)
  approvalDocument Bytes?    @db.MediumBlob
}

model Buyer {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @unique
  orders Order[]
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String
  price       Int
  sellerId    String
  seller      Seller          @relation(fields: [sellerId], references: [id])
  images      ProductImage[]
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  orders      Order[]

  @@index([categoryId, name])
}

model ProductImage {
  id        String  @id @default(uuid())
  blob      Bytes   @db.MediumBlob
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductCategory {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model Order {
  id        String   @id @default(uuid())
  buyerId   String
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  time      DateTime @default(now())
}

model Event {
  id   String   @id @default(uuid())
  time DateTime @default(now())
  type String
}

enum TokenType {
  EMAIL_VERIFICATION
  FORGOT_PASSWORD
}
