generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  password      String
  address       String?
  phoneNumber   String?
  verified      Boolean @default(false)
  adminId       String?
  sellerId      String?
  adminProfile  Admin?
  buyerProfile  Buyer?
  sellerProfile Seller?
  tokens        Token[]
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  expiresAt DateTime
  data      String?  @db.VarChar(1028)
}

model Token {
  id        String    @id @default(uuid())
  userId    String
  valid     Boolean   @default(true)
  createdAt DateTime  @default(now())
  type      TokenType
  user      User      @relation(fields: [userId], references: [id])
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Seller {
  id               String    @id @default(uuid())
  userId           String    @unique
  approved         Boolean   @default(false)
  approvalDocument String?    
  user             User      @relation(fields: [userId], references: [id])
  products         Product[]
}

model Buyer {
  id     String  @id @default(uuid())
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Orders[]
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String
  price       Int
  sellerId    String
  categoryId  String
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  seller      Seller          @relation(fields: [sellerId], references: [id])
  orders      Orders[]
  images      ProductImage[]

  @@index([categoryId, name])
}

model ProductImage {
  id        String  @id @default(uuid())
  blob      Bytes   @db.MediumBlob
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductCategory {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model Orders {
  id        String                @id @default(uuid())
  buyerId   String
  productId String
  quantity  Int                   @default(1)
  status    Boolean               @default(false)               
  time      DateTime              @default(now())
  buyer     Buyer                 @relation(fields: [buyerId], references: [id])
  product   Product               @relation(fields: [productId], references: [id])
}

model Event {
  id   String   @id @default(uuid())
  time DateTime @default(now())
  type String
}

enum TokenType {
  EMAIL_VERIFICATION
  FORGOT_PASSWORD
}
